profile: SOG-canvas
profile_version: 0.1

scene:
  primitives: 3DGS-INRIA
  params:
    - means
    - scales
    - opacities
    - quaternions
    - sh

ops:
  - input_fields: [sh]
    transforms:
      - split:
          to_field_list: [sh0, shN] #in sogs f_dc=sh0, frest=shN
          split_size_or_sections: [1, 15]
          dim: 1
          squeeze: true #false
          #TODO: in sogs transpose (1,2) is done after reading from .ply here not?

  - input_fields: [means]
    transforms:
      - remapping:
          method: signed-log
          to_field: means

  - input_fields: [scales]
    transforms:
      - remapping:
          method: log

  - input_fields: [opacities]
    transforms:
      - remapping:
          method: inverse-sigmoid

  - input_fields: [quaternions]
    transforms:
      - reparametize:
          method: unit_sphere
          dim: -1

  - input_fields: [means, sh0, shN, opacities, scales, quaternions]
    transforms:
      - plas:
          prune_by: opacities # in sogs purned by 0.5 of number gaussians instead
          scaling_fn: none #standardize
          # activated: true
          shuffle: true
          improvement_break: 1e-4
          to_field: sorted_indices
          weights:
            means: 1.0
            sh0: 1.0
            shN: 0.0 #shN not in sortkeys
            opacities: 0.0
            scales: 1.0
            quaternions: 1.0

  #means
  - input_fields: [means, sorted_indices]
    transforms:
      - reindex:
          src_field: means
          index_field: sorted_indices

  - input_fields: [means]
    transforms:
      - simple_quantize:
          dtype: uint16
          min: 0
          max: 65535
          dim: 2
          round_to_int: true
      - split_bytes:
          to_fields_with_prefix: means_bytes_
          num_bytes: 2

  - input_fields: [means_bytes_0]
    transforms:
      - to_field:
          to_field_name: means_l

  - input_fields: [means_bytes_1]
    transforms:
      - to_field:
          to_field_name: means_u

  #scales
  - input_fields: [scales, sorted_indices]
    transforms:
      - reindex:
          src_field: scales
          index_field: sorted_indices

  - input_fields: [scales]
    transforms:
      - simple_quantize:
          min: 0
          max: 255
          dim: 2
          dtype: uint8
          round_to_int: true

  - input_fields: [opacities, sorted_indices]
    transforms:
      - reindex:
          src_field: opacities
          index_field: sorted_indices

  - input_fields: [quaternions, sorted_indices]
    transforms:
      - reindex:
          src_field: quaternions
          index_field: sorted_indices

  - input_fields: [quaternions] #pack quaternions
    transforms:
      - reparametize:
          method: pack_dynamic
          to_fields_with_prefix: quaternions_packed_

  - input_fields: [quaternions_packed_values]
    transforms:
      - linear:
          method: multiply
          value: sqrt2
      - linear:
          method: multiply-add
          multiply: 0.5
          add: 0.5
      - linear:
          method: multiply
          value: 255
      - clamp:
          min: 0
          max: 255

  - input_fields: [quaternions_packed_values, quaternions_packed_indices]
    transforms:
      - combine:
          method: concat
          dim: 2
          to_field: quaternions

  - input_fields: [quaternions]
    transforms:
      - simple_quantize:
          min_values: [0, 0, 0, 252]
          max_values: [255, 255, 255, 255]
          dim: 2
          dtype: uint8
          round_to_int: true

  - input_fields: [sh0, sorted_indices]
    transforms:
      - reindex:
          src_field: sh0
          index_field: sorted_indices

  - input_fields: [shN, sorted_indices]
    transforms:
      - reindex:
          src_field: shN
          index_field: sorted_indices

  - input_fields: [opacities]
    transforms:
      - reshape:
          start_dim: 2
          shape: [1]

  - input_fields: [sh0, opacities] #opacity-sh0 rgba
    transforms:
      - combine:
          method: concat
          dim: 2
          to_field: sh0

  - input_fields: [sh0]
    transforms:
      - simple_quantize:
          min: 0
          max: 255
          dim: 2
          dtype: uint8
          round_to_int: true

  ##shN
  - input_fields: [shN]
    transforms:
      - reshape:
          shape: [-1, 45] # 3*15 spherical harmonics
      - cluster:
          method: kmeans
          num_clusters: 65536 #is dynamic in sogs
          distance: manhattan
          to_fields_with_prefix: shN_

  - input_fields: [shN_centroids]
    transforms:
      - simple_quantize:
          min: 0
          max: 255
          dim: 2
          dtype: uint8
          round_to_int: true

  - input_fields: [shN_centroids]
    transforms:
      - sort:
          method: lexicographic
          to_field: shN_centroids_indices

  - input_fields: [shN_centroids, shN_centroids_indices]
    transforms:
      - reindex:
          src_field: shN_centroids
          index_field: shN_centroids_indices

  - input_fields: [shN_centroids]
    transforms:
      - reshape:
          shape: [-1, 960, 3] # int(num_clusters*num_spherical_harmonics/3) =

  - input_fields: [shN_centroids_indices]
    transforms:
      - sort:
          method: argsort
          to_field: shN_centroids_indices_sorted_inverse

  - input_fields: [shN_labels, shN_centroids_indices_sorted_inverse]
    transforms:
      - reindex:
          src_field: shN_centroids_indices_sorted_inverse
          index_field: shN_labels

  #bug here:
  - input_fields: [shN_centroids_indices_sorted_inverse]
    transforms:
      - to_field:
          to_field_name: shN_labels

  - input_fields: [shN_labels]
    transforms:
      - reshape:
          shape: [588, 588] #n_sidelen
      - simple_quantize:
          min: 0
          max: 65535
          dim: 2
          dtype: uint16
          round_to_int: False
      - split_bytes:
          to_fields_with_prefix: shN_labels_
          num_bytes: 2

  - input_fields: [shN_labels_0, shN_labels_1]
    transforms:
      - combine:
          method: stack-zeros
          dim: 2
          to_field: shN_labels

  #img file outputs
  - input_fields: [means_l]
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true

  - input_fields: [means_u]
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true

  - input_fields: [scales]
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true

  - input_fields: [quaternions] #rgba
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true

  - input_fields: [sh0] #rgba
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true

  - input_fields: [shN_centroids] #rgb
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true

  - input_fields: [shN_labels] #rgb , result is suprisingly less noisy than in sogs
    transforms:
      - write_file:
          type: image
          image_codec: webp
          coding_params:
            lossless: true
            quality: 100
            method: 6
            exact: true
#TODO: decoding, output of metadata
